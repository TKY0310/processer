/* (regs32x32.fsl) */

module regs32x32 {
  input      in: Bit(32)
  input in_addr: Bit(5)
  input  a_addr: Bit(5)
  input  b_addr: Bit(5)
  output      a: Bit(32)
  output      b: Bit(32)
  
  val regs1 = new regs32x8
  val regs2 = new regs32x8
  val regs3 = new regs32x8
  val regs4 = new regs32x8
  
  def read_a(a_addr): Unit = {
   val addr = a_addr(4,3)
   if (a_addr == 0.toBit(5)) a = 0.toBit(32)
  	else{
  	addr match{
	 case 0b00 => a = regs1.read_a(a_addr(2,0)).a
	 case 0b01 => a = regs2.read_a(a_addr(2,0)).a
	 case 0b10 => a = regs3.read_a(a_addr(2,0)).a
	 case 0b11 => a = regs4.read_a(a_addr(2,0)).a
			}
		}
	}
  def read_b(b_addr): Unit = {
   val addr = b_addr(4,3)
   if (b_addr == 0.toBit(5)) b = 0.toBit(32)
	else{
	addr match{
  	 case 0b00 => b = regs1.read_b(b_addr(2,0)).b
	 case 0b01 => b = regs2.read_b(b_addr(2,0)).b
	 case 0b10 => b = regs3.read_b(b_addr(2,0)).b
	 case 0b11 => b = regs4.read_b(b_addr(2,0)).b
			}
		}
	}

  def write(in_addr, in): Unit = {
   val addr = in_addr(4,3)
   addr match{
  	 case 0b00 => regs1.write(in_addr(2,0),in)
	 case 0b01 => regs2.write(in_addr(2,0),in)
	 case 0b10 => regs3.write(in_addr(2,0),in)
	 case 0b11 => regs4.write(in_addr(2,0),in)
	 	}
	}

  def clear(): Unit = {
  	regs1.clear()
  	regs2.clear()
  	regs3.clear()
  	regs4.clear()
  }
}

/* End of file (regs32x32.fsl) */

